version: '3.8'

services:
  # Production-ready Writers Room X deployment
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://wrx:wrx_password@postgres:5432/wrx
      - REDIS_URL=redis://redis:6379
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://localhost:5000,https://*.replit.app
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=wrx
      - POSTGRES_USER=wrx
      - POSTGRES_PASSWORD=wrx_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wrx"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["/app/venv/bin/python", "-c", "from api.app.background import job_queue; import asyncio; asyncio.run(job_queue.start_worker())"]
    environment:
      - DATABASE_URL=postgresql://wrx:wrx_password@postgres:5432/wrx
      - REDIS_URL=redis://redis:6379
      - DEBUG=false
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: